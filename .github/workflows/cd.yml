name: CD

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker Tag'
        required: true

env:
  CONTAINER_NAME: shotbow-playercount-api
  IMAGE_NAME: shotbow-playercount-api

jobs:
  cd:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag }}"

            # Stop and remove old instance
            docker stop "${{ env.CONTAINER_NAME }}"
            docker rm "${{ env.CONTAINER_NAME }}"

            # Create new instance
            docker create \
            --name ${{ env.CONTAINER_NAME }} \
            --restart always \
            -e INFLUX_URL=${{ secrets.INFLUX_URL }} \
            -e INFLUX_TOKEN=${{ secrets.INFLUX_TOKEN }} \
            -e INFLUX_ORG=${{ secrets.INFLUX_ORG }} \
            -e INFLUX_BUCKET=${{ secrets.INFLUX_BUCKET }} \
            -l 'traefik.enable'=true \
            -l 'traefik.http.routers.sb-status-api-secured.entrypoints'=web-secured \
            -l 'traefik.http.routers.sb-status-api-secured.rule'="HOST(\`${{ secrets.VIRTUAL_HOST }}\`)" \
            -l 'traefik.http.routers.sb-status-api-secured.tls.certresolver'=myhttpchallenge \
            -l 'traefik.http.routers.sb-status-api.entrypoints'=web \
            -l 'traefik.http.routers.sb-status-api.middlewares'='redirect@file' \
            -l 'traefik.http.routers.sb-status-api.rule'="HOST(\`${{ secrets.VIRTUAL_HOST }}\`)" \
            -l 'traefik.http.services.sb-status-api.loadbalancer.server.port'='8080' \
            $IMAGE

            # Connect to the networks
            docker network connect influx_influx ${{ env.CONTAINER_NAME }}
            docker network connect web ${{ env.CONTAINER_NAME }}

            # Start container
            docker start ${{ env.CONTAINER_NAME }}
