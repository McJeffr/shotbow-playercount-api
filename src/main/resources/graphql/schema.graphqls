# Timestamp in UNIX time (seconds since January 1st, 1970).
scalar Timestamp

# Aggregation types, these determine how to aggregate data points (averages, minimums or maximums).
enum Aggregation {
    # Fetches the average of a group of player counts.
    AVG

    # Fetches the minimum of a group of player counts.
    MIN

    # Fetches the maximum of a group of player counts.
    MAX
}

# The flattened count object. This object contains all of the recorded player counts of each of the
# specified gamemodes on Shotbow at a specific timestamp.
type Count {
    # The timestamp at which all of the player counts in this object were recorded.
    timestamp: Timestamp!
    all: Int
    all_us: Int
    all_eu: Int
    minez: Int
    smash: Int
    ghostcraft: Int
    hcfactions: Int
    annihilation: Int
    lms: Int
    wasted: Int
    wasted_sandbox: Int
    wasted_gungame: Int
    wasted_control: Int
    dbv: Int
    craftybomber: Int
    vadact: Int
    wir: Int
    minez2: Int
    slaughter: Int
    lightbikes: Int
    hips: Int
    mama: Int
    sweepers: Int
    lobby: Int
    gg: Int
    flappy: Int
    assault: Int
    goldrush: Int
    mta: Int
    civwar: Int
    ddg: Int
    shotball: Int
    annihilation_us: Int
    dbv_us: Int
    shotball_us: Int
    gg_us: Int
    lobby_lobby: Int
    lobby_us: Int
    minez_us: Int
    wir_us: Int
    slaughter_us: Int
    smash_us: Int
    hcfactions_us: Int
}

# A collection of queries for fetching the player count objects.
type CountQueries {
    # Fetches the most recent player count.
    latest: Count

    # Fetches a list of player counts based on the provided interval.
    interval(from: Timestamp!, to: Timestamp!, type: Aggregation = AVG, points: Int = 100): [Count!]
}

schema {
    query: CountQueries
}
